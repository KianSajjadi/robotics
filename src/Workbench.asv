qMax = [2.5 1.8 2.5 1.8 1.8 1.8 2.5];
qMin = -qMax;
maxAllowedVelocity = 0.6/30; %taken from hanscute recommended maxspeed in the sourcecode
clf
robot = HansCute;
qVelocities = zeros(1, 7);
q = zeros(1, 7);
robot.model.animate(q);
breadTr = transl(0.1, 0.1, 0);
bread = Bread(46, 60, breadTr);
testAnimate(robot, q, qVelocities, qMax, qMin, maxAllowedVelocity)


%% Main Function
%Used to run demonstration
function testAnimate(robot, q, qVelocities, qMax, qMin, maxAllowedVelocity)
	endEffectorVelocities = transpose([0 0 -1 0 0 0]);
   %first location above toast
    endEffectorLocationTr = transl(0.1, 0.1, 0.2) * trotx(pi);
	goalJoints = robot.model.ikine(endEffectorLocationTr, q, [1 1 1 1 1 1]);
	numSteps = 120;
    qMatrix = robot.GetListOfPoses(q, goalJoints, numSteps);
	AnimateRobotMovement(qMatrix, robot, numSteps, false, 0, 0, 0);
	%now toast has been grabbed
	q = goalJoints;
	while true
		w = JointsTools.getWeightedMatrix(q, qMax, qMin, qVelocities, ones(1,7));
		j = robot.model.jacob0(q);
		qVelocities = JointsTools.getJointVelocities(q, j, endEffectorVelocities, w);
		clampedQVelocities = clampQVelocities(qVelocities, maxAllowedVelocity);
		q = q + transpose(clampedQVelocities);
		robot.model.animate(q);
		drawno
	end
	
	%% clampedQVelocity
	%prevent joins from exceeding maxAllowedVelocity
	function clampedQVelocities = clampQVelocities(qVelocities, maxAllowedVelocity)
		maxVelocity = max(qVelocities);
	    x = qVelocities / maxVelocity;
		clampedQVelocities = x * maxAllowedVelocity;
	end
	
end




